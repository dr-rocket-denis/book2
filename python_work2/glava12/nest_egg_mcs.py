import sys
import random
import matplotlib.pyplot as plt
def read_to_list(file_name):
    with open(file_name) as in_file:
        lines = [float(line.strip()) for line in in_file]
        decimal = [round(line / 100, 5) for line in lines]
        return decimal
def default_input(prompt, default=None):
    prompt = '{} [{}]'.format(prompt, default)
    response = input(prompt)
    if not response and default:
        return default
    else:
        return response
print("\nNote: Input data should be in percent, not decimal!\n")
try:
    bonds = read_to_list('10-yr_TBond_returns_1926-2013_pct.txt')
    stocks = read_to_list('SP500_returns_1926-2013_pct.txt')
    blend_40_50_10 = read_to_list('S-B-C_blend_1926-2013_pct.txt')
    blend_50_50 = read_to_list('S-B_blend_1926-2013_pct.txt')
    infl_rate = read_to_list('annual_infl_rate_1926-2013_pct.txt')
except IOError as e:
    print("{}. \nTerminating program.".format(e), file=sys.stderr)
    sys.exit(1) 
investment_type_args = {'bonds': bonds, 'stocks': stocks, 'sb_blend': blend_50_50, 'sbc_blend': blend_40_50_10}
print("   stocks = SP500")
print("    bonds = 10-–ª–µ—Ç–Ω–∏–µ –∫–∞–∑–Ω–∞—á–µ–π—Å–∫–∏–µ –æ–±–ª–∏–≥–∞—Ü–∏–∏")
print(" sb_blend = 50% SP500/50% –∫–∞–∑–Ω.–æ–±–ª")
print("sbc_blend = 40% SP500/50% –∫–∞–∑–Ω.–æ–±–ª/10% –Ω–∞–ª.\n")
print("–ù–∞–∂–º–∏—Ç–µ –∫–ª–∞–≤–∏—à—É –í–í–û–î, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤ [—Å–∫–æ–±–∫–∞—Ö]. \n")
invest_type = default_input("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: (–∞–∫—Ü–∏–∏, –æ–±–ª–∏–≥–∞—Ü–∏–∏, –∏—Ö —Å–æ—á–µ—Ç–∞–Ω–∏–µ–± scbs_blend): \n", '–æ–±–ª–∏–≥–∞—Ü–∏–π').lower()
while invest_type not in investment_type_args:
    invest_type = input("–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏. –í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π, –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏: ")
start_value = default_input("–í–≤–æ–¥ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: \n", '2000000')
while not start_value.isdigit():
    start_value = input("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥! –¢–æ–ª—å–∫–æ –≤—Ö–æ–¥–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ: ")
withdrawal = default_input("–í–≤–æ–¥ –µ–∂–µ–≥–æ–¥–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –¥–æ —É–ø–ª–∞—Ç—ã –Ω–∞–ª–æ–≥–æ–≤ (–≤ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –¥–æ–ª–ª–∞—Ä–∞—Ö): \n", '80000')
while not withdrawal.isdigit():
    withdrawal = input("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥! –¢–æ–ª—å–∫–æ –≤—Ö–æ–¥–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ: ")
min_years = default_input("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ç–∞–∂ –≤—ã—Ö–æ–¥–∞ –Ω–∞ –ø–µ–Ω—Å–∏—é: \n", '18')
while not min_years.isdigit():
    min_years = input("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥! –¢–æ–ª—å–∫–æ –≤—Ö–æ–¥–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ: ")
most_likely_years = default_input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–µ –≥–æ–¥—ã –≤—ã—Ö–æ–¥–∞ –Ω–∞ –ø–µ–Ω—Å–∏—é: \n", '25')
while not most_likely_years.isdigit():
    most_likely_years = input("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥! –¢–æ–ª—å–∫–æ –≤—Ö–æ–¥–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ: ")
max_years = default_input("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –≥–æ–¥—ã –≤—ã—Ö–æ–¥–∞ –Ω–∞ –ø–µ–Ω—Å–∏—é: \n", '40')
while not max_years.isdigit():
    max_years = input("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥! –¢–æ–ª—å–∫–æ –≤—Ö–æ–¥–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ: ")
num_cases = default_input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π: \n", '50000')
while not num_cases.isdigit():
    num_cases = input("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥! –¢–æ–ª—å–∫–æ –≤—Ö–æ–¥–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ: ")
if not int(min_years) < int(most_likely_years) < int(max_years) or int(max_years) > 99:
    print("\n–ü—Ä–æ–±–ª–µ–º–∞ —Å –≤—Ö–æ–¥–Ω—ã–º–∏ –≥–æ–¥–∞–º–∏.", file=sys.stderr)
    print("–¢—Ä–µ–±—É–µ—Ç—Å—è, —á—Ç–æ–±—ã –º–∏–Ω. < –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω. < –º–∞–∫—Å, –≥–¥–µ –º–∞–∫—Å. <= 99.", file=sys.stderr)
    sys.exit(1)
def montecarlo(returns):
    case_count = 0
    bankrupt_count = 0
    outcome = []
    while case_count < int(num_cases):
        investments = int(start_value)
        start_year = random.randrange(0, len(returns))
        duration = int(random.triangular(int(min_years), int(max_years), int(most_likely_years)))
        end_year = start_year + duration
        lifespan = [i for i in range(start_year, end_year)]
        bankrupt = 'no'
        lifespan_returns = []
        lifespan_infl = []
        for i in lifespan:
            lifespan_returns.append(returns[i % len(returns)])
            lifespan_infl.append(infl_rate[i % len(infl_rate)])
        for index, i in enumerate(lifespan_returns):
            infl = lifespan_infl[index]
            if index == 0:
                windraw_infl_adj = int(withdrawal)
            else:
                windraw_infl_adj = int(windraw_infl_adj * (1 + infl))
            investments -= windraw_infl_adj
            investments = int(investments * (1 + i))
            if investments <= 0:
                bankrupt = 'yes'
                break
        if bankrupt == 'yes':
            outcome.append(0)
            bankrupt_count += 1
        else:
            outcome.append(investments)
    case_count+= 1 
    return outcome, bankrupt_count
def bankrupt_prob(outcome, bankrupt_count):
    total = len(outcome)
    odds = round(100 * bankrupt_count / total, 1)
    print("\n–¢–∏–ø –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: {}".format(invest_type))
    print("–ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${:,}".format(int(start_value)))
    print("–ï–∂–µ–≥–æ–¥–Ω—ã–π –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤: ${:,}".format(int(withdrawal)))
    print("–ì–æ–¥—ã –Ω–∞ –ø–µ–Ω—Å–∏–∏ (–º–∏–Ω-–º–ª-–º–∞–∫—Å): {}-{}-{}".format(min_years, most_likely_years, max_years))
    print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—É—Å–∫–æ–≤: {:,}\n".format(len(outcome)))
    print("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç–æ–≥–æ, —á—Ç–æ –¥–µ–Ω—å–≥–∏ –∫–æ–Ω—á–∞—Ç—Å—è: {}%\n".format(odds))
    print("–°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${:,}".format(int(sum(outcome) / total)))
    print("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${:,}".format(min(i for i in outcome)))
    print("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${:,}".format(max(i for i in outcome)))
    return odds
def main():
    outcome, bankrupt_count = montecarlo(investment_type_args[invest_type])
    odds = bankrupt_prob(outcome, bankrupt_count)
    plotdata = outcome[:3000]
    plt.figure('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –¥–µ–ª—É (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ {} –∑–∞–ø—É—Å–∫–∏)'.format(len(plotdata)), figsize=(16, 5)) 
    index = [i + 1 for i in range(len(plotdata))]
    plt.bar(index, plotdata, color='black')
    plt.xlabel('–°–∏–º—É–ª–∏—Ä—É—é–º—ã–µ –∂–∏–∑–Ω–∏', fontsize=18)
    plt.ylabel('–û—Å—Ç–∞—Ç–æ–∫ üí≤', fontsize=18)
    plt.ticklabel_format(style='plain', axis='y')
    ax = plt.gca()
    ax.get_yaxis().set_major_formatter(plt.FuncFormatter(lambda x, loc: "{:,}".format(int(x))))
    plt.title('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –¥–µ–Ω–µ–≥ = {}%'.format(odds), fontsize=20, color='red')
    plt.show()
if __name__ == '__main__':
    main()